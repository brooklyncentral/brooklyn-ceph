brooklyn.catalog:
  version: "1.0.0-SNAPSHOT" # BROOKLYN_CEPH_VERSION
  publish:
    description: |
      Ceph is a massively scalable, open source, distributed storage system.
      It is comprised of an object store, block store, and a distributed file system.
    license_code: "APACHE-2.0"
    defaults:
      rethinkDBIconUrl: &cephIconUrl "https://twitter.com/Ceph/profile_image?size=original"
  items:
  - "https://raw.githubusercontent.com/brooklyncentral/common-catalog-utils/master/common/src/main/resources/common/common.bom"
  - id: ceph-node
    name: "Ceph Node"
    description: |
      A single ceph node
    itemType: entity
    iconUrl: *cephIconUrl
    item:
      id: ceph-node
      name: "Ceph Node"
      type: centos-software-process
      brooklyn.parameters: &cephNodeParams
      - name: ceph.release.name
        label: "ceph.release.name"
        description: |
          Ceph release name
        type: string
        default: jewel
      - name: ceph.release.version
        label: "ceph.release.version"
        description: |
          Ceph release version
        type: string
        default: "1-1"
      - name: ceph.sharedsecuritygroup.create
        label: "ceph.sharedsecuritygroup.create"
        description: |
          Ceph shared security group
        type: boolean
        default: true
      brooklyn.config:
        ceph.monitor.port: 6789
        shell.env:
          ENTITY_ID: $brooklyn:attributeWhenReady("entity.id")
          CEPH_RELEASE_NAME: $brooklyn:config("ceph.release.name")
          CEPH_RELEASE_VERSION: $brooklyn:config("ceph.release.version")
          CEPH_TARGET_DISTRO: el7
        install.command: |
          sudo rpm --import 'https://download.ceph.com/keys/release.asc'
          sudo tee /etc/yum.repos.d/ceph.repo <<-EOF
          [ceph]
          name=Ceph packages for \$basearch
          baseurl=https://download.ceph.com/rpm-${CEPH_RELEASE_NAME}/${CEPH_TARGET_DISTRO}/\$basearch
          enabled=1
          priority=2
          gpgcheck=1
          gpgkey=https://download.ceph.com/keys/release.asc

          [ceph-noarch]
          name=Ceph noarch packages
          baseurl=https://download.ceph.com/rpm-${CEPH_RELEASE_NAME}/${CEPH_TARGET_DISTRO}/noarch
          enabled=1
          priority=2
          gpgcheck=1
          gpgkey=https://download.ceph.com/keys/release.asc

          [ceph-source]
          name=Ceph source packages
          baseurl=https://download.ceph.com/rpm-${CEPH_RELEASE_NAME}/${CEPH_TARGET_DISTRO}/SRPMS
          enabled=0
          priority=2
          gpgcheck=1
          gpgkey=https://download.ceph.com/keys/release.asc
          EOF

          sudo yum update -y
          sudo yum install -y epel-release augeas wget ntp snappy leveldb gdisk python-argparse gperftools-libs
          sudo yum install -y ceph
          sudo usermod -a -G ceph ${USER}
          sudo usermod -aG wheel ceph

          sudo wget https://raw.githubusercontent.com/brooklyncentral/brooklyn-rethinkdb/master/resources/rethinkdb/augtool-helper.sh -O /usr/sbin/augtool-helper
          sudo chmod 751 /usr/sbin/augtool-helper
          sudo tee /usr/share/augeas/lenses/dist/ceph.aug <<-EOF
          (* Ceph module for Augeas
           Author: Pavel Chechetin  <pchechetin@mirantis.com>

           ceph.conf is a standard INI File with whitespaces in the title.
          *)
          module Ceph =
            autoload xfm
          let comment    = IniFile.comment IniFile.comment_re IniFile.comment_default
          let sep        = IniFile.sep IniFile.sep_re IniFile.sep_default
          let entry_re   = /[A-Za-z0-9_.-][A-Za-z0-9 _.-]*[A-Za-z0-9_.-]/
          let entry      = IniFile.indented_entry entry_re sep comment
          let title   = IniFile.indented_title IniFile.record_re
          let record  = IniFile.record title entry
          let lns     = IniFile.lns record comment
          let filter = (incl "/etc/ceph/ceph.conf")
                     . (incl (Sys.getenv("HOME") . "/.ceph/config"))
          let xfm = transform lns filter
          EOF
        provisioning.properties:
          customizer:
            $brooklyn:object:
              type: org.apache.brooklyn.location.jclouds.networking.SharedLocationSecurityGroupCustomizer
              object.fields:
                enabled: $brooklyn:config("ceph.sharedsecuritygroup.create")
                tcpPortRanges:
                  - "6800-7300"

  - id: ceph-monitor-node
    name: "Ceph Monitor Node"
    itemType: entity
    iconUrl: *cephIconUrl
    item:
      type: ceph-node
      name: "Ceph Monitor Node"
      brooklyn.parameters:
      - name: ceph.cluster.name
        label: "ceph.cluster.name"
        description: |
          Ceph monitor cluster name
        type: string
        default: ceph
      - name: ceph.monitor.hostnames
        label: "ceph.monitor.hostnames"
        description: |
          Ceph monitor hostnames (comma seperated)
        type: string
      - name: ceph.monitor.fsid
        label: "ceph.monitor.fsid"
        description: |
          Ceph monitor fsid, unique filesystem identifier (UUID)
        type: string
      - name: ceph.client.admin.keyring
        label: "ceph.client.admin.keyring"
        description: |
          Ceph admin keyring
        type: string
      brooklyn.config:
        shell.env:
          HOST_SUBNET_ADDRESS: $brooklyn:attributeWhenReady("host.subnet.address")
          RUN_DIR: $brooklyn:attributeWhenReady("run.dir")
          CEPH_CLUSTER_NAME: $brooklyn:config("ceph.cluster.name")
          CEPH_MON_HOSTNAMES: $brooklyn:config("ceph.monitor.hostnames")
          CEPH_MON_FSID: $brooklyn:config("ceph.monitor.fsid")
          CEPH_CLIENT_ADMIN_KEYRING: $brooklyn:config("ceph.client.admin.keyring")
        customize.command: |
          if [ -z "${CEPH_MON_FSID}" ]; then
            CEPH_MON_FSID=$(uuidgen)
          fi
          echo "${CEPH_MON_FSID}" > ${RUN_DIR}/ceph-monitor-fsid.txt
          sudo touch /etc/ceph/ceph.conf
          sudo augtool-helper -l Ceph -f /etc/ceph/ceph.conf <<-EOF
          set /files/etc/ceph/ceph.conf/gloabl/fsid ${CEPH_MON_FSID}
          set /files/etc/ceph/ceph.conf/gloabl/'mon initial members' ${CEPH_MON_HOSTNAMES}
          set /files/etc/ceph/ceph.conf/gloabl/'mon host' ${CEPH_MON_HOSTNAMES}
          EOF
          sudo augtool-helper -l Properties -f /etc/sysconfig/ceph <<-EOF
            set /files/etc/sysconfig/ceph/CLUSTER ${CEPH_CLUSTER_NAME}
          EOF
          sudo touch /etc/ceph/ceph.client.admin.keyring
          if [ -z "${CEPH_CLIENT_ADMIN_KEYRING}" ]; then
            sudo ceph-authtool --create-keyring /etc/ceph/ceph.client.admin.keyring --gen-key -n client.admin --set-uid=0 --cap mon 'allow *' --cap osd 'allow *' --cap mds 'allow'
          else
            echo "${CEPH_CLIENT_ADMIN_KEYRING}" | sudo tee -a /etc/ceph/ceph.client.admin.keyring
          fi
          sudo -u ceph ceph-authtool --create-keyring /tmp/ceph.mon.keyring --gen-key -n mon. --cap mon 'allow *'

          sudo -u ceph ceph-authtool /tmp/ceph.mon.keyring --import-keyring /etc/ceph/ceph.client.admin.keyring

          sudo rm -f /tmp/monmap
          for CEPH_MON_HOSTNAME in  $(echo "${CEPH_MON_HOSTNAMES}" | sed 's/,/ /g'); do
            if [ ! -f /tmp/monmap ]; then
              sudo -u ceph monmaptool --create --add ${CEPH_MON_HOSTNAME} ${CEPH_MON_HOSTNAME} --fsid ${CEPH_MON_FSID} /tmp/monmap
            else
              sudo -u ceph monmaptool --add ${CEPH_MON_HOSTNAME} ${CEPH_MON_HOSTNAME} --fsid ${CEPH_MON_FSID} /tmp/monmap
            fi
          done
          sudo -u ceph mkdir -p /var/lib/ceph/mon/${CEPH_CLUSTER_NAME}-${HOST_SUBNET_ADDRESS}
          sudo -u ceph ceph-mon --cluster ${CEPH_CLUSTER_NAME} --mkfs -i ${HOST_SUBNET_ADDRESS} --monmap /tmp/monmap --keyring /tmp/ceph.mon.keyring
          sudo -u ceph touch /var/lib/ceph/mon/${CEPH_CLUSTER_NAME}-${HOST_SUBNET_ADDRESS}/done
        launch.command: |
          sudo systemctl start ceph-mon@${HOST_SUBNET_ADDRESS}
        checkRunning.command: |
          sudo systemctl status ceph-mon@${HOST_SUBNET_ADDRESS}

      brooklyn.initializers:
      - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
        brooklyn.config:
          name: ceph.monitor.fsid
          description: |
            TODO
          targetType: string
          command: |
            cat ${RUN_DIR}/ceph-monitor-fsid.txt || exit 1
      - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
        brooklyn.config:
          name: ceph.client.admin.keyring
          description: |
            TODO
          targetType: string
          command: |
            cat /etc/ceph/ceph.client.admin.keyring || exit 1

  - id: ceph-monitor-cluster
    name: "Ceph Monitor Cluster"
    itemType: entity
    iconUrl: *cephIconUrl
    item:
      type: cluster
      id: ceph-monitor-cluster
      name: "Ceph Monitor Cluster"
      brooklyn.config:
        cluster.initial.size: 3
        dynamiccluster.firstmemberspec:
          $brooklyn:entitySpec:
            type: ceph-monitor-node
            id: first-ceph-monitor-node
            brooklyn.config:
              shell.env:
                CEPH_MON_HOSTNAMES: $brooklyn:parent().attributeWhenReady("ceph.monitor.hostnames")
        dynamiccluster.memberspec:
          $brooklyn:entitySpec:
            type: ceph-monitor-node
            brooklyn.config:
              shell.env:
                CEPH_CLIENT_ADMIN_KEYRING: $brooklyn:attributeWhenReady("cluster.first.entity").attributeWhenReady("ceph.client.admin.keyring")
                CEPH_MON_HOSTNAMES: $brooklyn:parent().attributeWhenReady("ceph.monitor.hostnames")
                CEPH_MON_FSID: $brooklyn:attributeWhenReady("cluster.first.entity").attributeWhenReady("ceph.monitor.fsid")
      brooklyn.enrichers:
        - type: org.apache.brooklyn.enricher.stock.Aggregator
          brooklyn.config:
            uniqueTag: ceph-monitor-hostname-aggregator
            enricher.sourceSensor: $brooklyn:sensor("host.subnet.address")
            enricher.targetSensor: $brooklyn:sensor("ceph.monitor.hostname.list")
            enricher.aggregating.fromMembers: true
            enricher.aggregator.excludeBlank: true
        - type: org.apache.brooklyn.enricher.stock.Joiner
          brooklyn.config:
            uniqueTag: ceph-monitor-hostname-joiner
            enricher.sourceSensor: $brooklyn:sensor("ceph.monitor.hostname.list")
            enricher.targetSensor: $brooklyn:sensor("ceph.monitor.hostnames")
            enricher.joiner.quote: false

  - id: ceph-osd-node
    name: "Ceph OSD Node"
    itemType: entity
    iconUrl: *cephIconUrl
    item:
      type: ceph-node
      name: "Ceph OSD Node"
      brooklyn.parameters:
      - name: ceph.osd.weight
        label: "ceph.osd.weight"
        description: |
          Ceph OSD weight
        type: double
        default: 1.0
      brooklyn.config:
        shell.env:
          HOST_SUBNET_ADDRESS: $brooklyn:attributeWhenReady("host.subnet.address")
          RUN_DIR: $brooklyn:attributeWhenReady("run.dir")
          CEPH_CLUSTER_NAME: $brooklyn:config("ceph.cluster.name")
          CEPH_OSD_WEIGHT: $brooklyn:config("ceph.osd.weight")
#          CEPH_OSD_MOUNT_POINT: /dev/{hdd}
          CEPH_MON_FSID: $brooklyn:config("ceph.monitor.fsid")
          CEPH_MON_HOSTNAMES: $brooklyn:config("ceph.monitor.hostnames")
          CEPH_CLIENT_ADMIN_KEYRING: $brooklyn:config("ceph.client.admin.keyring")

        customize.command: |
          CEPH_OSD_UUID=$(uuidgen)
          echo "${CEPH_OSD_UUID}" > ${RUN_DIR}/ceph-osd-uuid.txt
          sudo touch /etc/ceph/ceph.conf
          sudo augtool-helper -l Ceph -f /etc/ceph/ceph.conf <<-EOF
          set /files/etc/ceph/ceph.conf/gloabl/fsid ${CEPH_MON_FSID}
          set /files/etc/ceph/ceph.conf/global/'mon initial members' ${CEPH_MON_HOSTNAMES}
          set /files/etc/ceph/ceph.conf/global/'mon host' ${CEPH_MON_HOSTNAMES}
          EOF
          sudo touch /etc/ceph/ceph.client.admin.keyring
          if [ -z "${CEPH_CLIENT_ADMIN_KEYRING}" ]; then
            >&2 echo "Ceph client admin keyring not supplied but is required"
            exit 1
          else
            echo "${CEPH_CLIENT_ADMIN_KEYRING}" | sudo tee -a /etc/ceph/ceph.client.admin.keyring
          fi

          CEPH_OSD_NUMBER=$(sudo -u ceph ceph osd create ${CEPH_OSD_UUID})
          echo "${CEPH_OSD_NUMBER}" > ${RUN_DIR}/ceph-osd-number.txt

          sudo -u ceph mkdir -p /var/lib/ceph/osd/${CEPH_CLUSTER_NAME}-${CEPH_OSD_NUMBER}
          if [ ! -z "${CEPH_OSD_MOUNT_POINT}" ]; then
            sudo mount -o user_xattr ${CEPH_OSD_MOUNT_POINT} /var/lib/ceph/osd/${CEPH_CLUSTER_NAME}-${CEPH_OSD_NUMBER}
          fi
          sudo -u ceph ceph-osd -i ${CEPH_OSD_NUMBER} --mkfs --mkkey --osd-uuid ${CEPH_OSD_UUID}
          sudo -u ceph ceph auth add osd.${CEPH_OSD_NUMBER} osd 'allow *' mon 'allow profile osd' -i /var/lib/ceph/osd/${CEPH_CLUSTER_NAME}-${CEPH_OSD_NUMBER}/keyring

          for CEPH_MON_HOSTNAME in $(echo "${CEPH_MON_HOSTNAMES}" | sed 's/,/ /g'); do
          	{ sudo -u ceph ceph --cluster ${CEPH_CLUSTER_NAME} osd crush add-bucket ${CEPH_MON_HOSTNAME} host; break; } || { continue; }
          done
          if [ "$?" == "0" ]; then
            >&2 echo "Failed to add bucket to crush map"
            exit 1
          fi

          for CEPH_MON_HOSTNAME in $(echo "${CEPH_MON_HOSTNAMES}" | sed 's/,/ /g'); do
            { sudo -u ceph ceph osd crush move ${CEPH_MON_HOSTNAME} root=default; break; } || { continue; }
          done
          if [ "$?" == "0" ]; then
            >&2 echo "Failed to move OSD into crush map"
            exit 1
          fi

          for CEPH_MON_HOSTNAME in $(echo "${CEPH_MON_HOSTNAMES}" | sed 's/,/ /g'); do
            { sudo -u ceph ceph --cluster ${CEPH_CLUSTER_NAME} osd crush add "osd.${CEPH_OSD_NUMBER}" ${CEPH_OSD_WEIGHT} host=${CEPH_MON_HOSTNAME}; break; } || { continue; }
          done
          if [ "$?" == "0" ]; then
            >&2 echo "Failed to add crush map to cluster"
            exit 1
          fi
        launch.command: |
          sudo systemctl start ceph-osd@$(cat ${RUN_DIR}/ceph-osd-number.txt)
        checkRunning.command: |
          sudo systemctl status ceph-osd@$(cat ${RUN_DIR}/ceph-osd-number.txt)

  - id: ceph-osd-cluster
    name: "Ceph OSD Cluster"
    itemType: entity
    iconUrl: *cephIconUrl
    item:
      type: cluster
      name: "Ceph OSD Cluster"
      brooklyn.config:
        cluster.initial.size: 3
        dynamiccluster.memberspec:
          $brooklyn:entitySpec:
            type: ceph-monitor-node

# TODO ADD RBD

  - id: ceph-mds-node
    name: "Ceph Metadata Service Node"
    itemType: entity
    iconUrl: *cephIconUrl
    item:
      type: ceph-node
      name: "Ceph Metadata Service Node"
      brooklyn.config:
        customize.command: |
          echo "CONFIGURE SOMETHING!"
        launch.command: |
          echo "LAUNCH SOMETHING!"


  - id: ceph
    name: "Ceph"
    itemType: template
    iconUrl: *cephIconUrl
    item:
      services:
      - type: ceph-monitor-cluster
      - type: ceph-osd-cluster
        brooklyn.config:
          ceph.monitor.fsid: $brooklyn:component("sibling","ceph-monitor-cluster").attributeWhenReady("cluster.first.entity").attributeWhenReady("ceph.monitor.fsid")
          ceph.client.admin.keyring: $brooklyn:component("sibling","ceph-monitor-cluster").attributeWhenReady("cluster.first.entity").attributeWhenReady("ceph.client.admin.keyring")
          ceph.monitor.hostnames: $brooklyn:component("sibling","ceph-monitor-cluster").attributeWhenReady("ceph.monitor.hostnames")
          ceph.cluster.name: $brooklyn:component("sibling","ceph-monitor-cluster").attributeWhenReady("cluster.first.entity").config("ceph.cluster.name")
